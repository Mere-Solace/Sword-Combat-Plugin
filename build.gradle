plugins {
    id 'java'
    id 'checkstyle'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'xyz.jpenilla.run-paper' version '2.3.1'
}

group = 'btm'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "dmulloy2-repo"
        url = uri("https://repo.dmulloy2.net/repository/public/")
    }
    maven {
        name "xenondevsReleases"
        url 'https://repo.xenondevs.xyz/releases'
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21-R0.1-SNAPSHOT")
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation "xyz.xenondevs.invui:invui:1.0"
//    compileOnly "com.comphenix.protocol:ProtocolLib:5.1.0"

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21.8")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('paper-plugin.yml') {
        expand props
    }
}

// Checkstyle configuration - detects code quality issues
checkstyle {
    toolVersion = '10.12.5'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = true  // Warning mode - don't fail builds initially
    showViolations = true
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
    }
}

// Spotless configuration - auto-fixes code formatting
spotless {
    java {
        target 'src/**/*.java'

        // Remove unused imports
        removeUnusedImports()

        // Format imports
        importOrder()

        // Apply formatting
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()

        // Optional: Use Google Java Format or Palantir
        // googleJavaFormat()
    }
}
